# Flask Chat API - JWT Endpoints (cURL Commands)

## 1. Login - Get JWT Token

```bash
curl -X POST http://localhost:5001/login \
  -H "Content-Type: application/json" \
  -d '{
    "user_id": "your_user_id",
    "password": "your_password"
  }'
```

**Response:**
```json
{
  "message": "Login successful!",
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "user_id": "your_user_id",
  "expires_in": "24 hours"
}
```

---

## 2. Send Message

```bash
curl -X POST http://localhost:5001/auth/send_message \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE" \
  -d '{
    "message": "Hello, this is a test message!",
    "recipient_user_id": "recipient_user_id"
  }'
```

**Response:**
```json
{
  "message": "Message sent successfully",
  "message_id": 1,
  "sender": "your_user_id",
  "recipient": "recipient_user_id",
  "timestamp": "2025-06-02T10:30:45.123456"
}
```

---

## 3. Get All Messages for Authenticated User

```bash
curl -X GET http://localhost:5001/auth/messages \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"
```

**Response:**
```json
{
  "messages": [
    {
      "message_id": 1,
      "sender": "user1",
      "recipient": "user2",
      "message": "Hello there!",
      "timestamp": "2025-06-02 10:30:45",
      "is_read": false,
      "direction": "sent"
    },
    {
      "message_id": 2,
      "sender": "user2",
      "recipient": "user1",
      "message": "Hi back!",
      "timestamp": "2025-06-02 10:31:15",
      "is_read": true,
      "direction": "received"
    }
  ],
  "total_messages": 2
}
```

---

## 4. Get Conversation with Specific User

```bash
curl -X GET http://localhost:5001/auth/conversation/other_user_id \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"
```

**Response:**
```json
{
  "conversation": [
    {
      "message_id": 1,
      "sender": "your_user_id",
      "recipient": "other_user_id",
      "message": "Hey, how are you?",
      "timestamp": "2025-06-02 10:30:45",
      "is_read": false,
      "direction": "sent"
    },
    {
      "message_id": 2,
      "sender": "other_user_id",
      "recipient": "your_user_id",
      "message": "I'm doing great, thanks!",
      "timestamp": "2025-06-02 10:31:30",
      "is_read": true,
      "direction": "received"
    }
  ],
  "participants": ["your_user_id", "other_user_id"],
  "total_messages": 2
}
```

---

## 5. Mark Message as Read

```bash
curl -X PUT http://localhost:5001/auth/mark_read/MESSAGE_ID \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"
```

**Example:**
```bash
curl -X PUT http://localhost:5001/auth/mark_read/5 \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"
```

**Response:**
```json
{
  "message": "Message marked as read"
}
```

---

## 6. Get All Users

```bash
curl -X GET http://localhost:5001/auth/users \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"
```

**Response:**
```json
{
  "users": [
    {
      "user_id": "user1",
      "email": "user1@example.com",
      "full_name": "John Doe",
      "created_at": "2025-06-01 09:00:00"
    },
    {
      "user_id": "user2",
      "email": "user2@example.com",
      "full_name": "Jane Smith",
      "created_at": "2025-06-01 10:15:30"
    }
  ],
  "total_users": 2
}
```

---

## 7. Delete Message

```bash
curl -X DELETE http://localhost:5001/auth/delete_message/MESSAGE_ID \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"
```

**Example:**
```bash
curl -X DELETE http://localhost:5001/auth/delete_message/3 \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"
```

**Response:**
```json
{
  "message": "Message deleted successfully"
}
```

---

## Complete Workflow Example

### Step 1: Login and get token
```bash
# Login
TOKEN=$(curl -s -X POST http://localhost:5001/login \
  -H "Content-Type: application/json" \
  -d '{
    "user_id": "alice",
    "password": "alice123"
  }' | jq -r '.token')

echo "Token: $TOKEN"
```

### Step 2: Send a message
```bash
curl -X POST http://localhost:5001/auth/send_message \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "message": "Hello Bob, how are you doing?",
    "recipient_user_id": "bob"
  }'
```

### Step 3: Get all messages
```bash
curl -X GET http://localhost:5001/auth/messages \
  -H "Authorization: Bearer $TOKEN" | jq
```

### Step 4: Get conversation with Bob
```bash
curl -X GET http://localhost:5001/auth/conversation/bob \
  -H "Authorization: Bearer $TOKEN" | jq
```

### Step 5: Mark a message as read (message ID 1)
```bash
curl -X PUT http://localhost:5001/auth/mark_read/1 \
  -H "Authorization: Bearer $TOKEN"
```

### Step 6: Get all users
```bash
curl -X GET http://localhost:5001/auth/users \
  -H "Authorization: Bearer $TOKEN" | jq
```

### Step 7: Delete a message (message ID 2)
```bash
curl -X DELETE http://localhost:5001/auth/delete_message/2 \
  -H "Authorization: Bearer $TOKEN"
```

---

## Error Responses

### Invalid/Missing Token
```json
{
  "error": "Token is missing!"
}
```

### Expired Token
```json
{
  "error": "Token has expired!"
}
```

### Invalid Token
```json
{
  "error": "Token is invalid!"
}
```

### Invalid Credentials (Login)
```json
{
  "error": "Invalid user ID or password!"
}
```

### User Not Found
```json
{
  "error": "Recipient user not found"
}
```

### Permission Denied
```json
{
  "error": "You can only mark your received messages as read"
}
```

---

## Notes

1. **Replace placeholders:**
   - `YOUR_JWT_TOKEN_HERE` with actual JWT token from login
   - `MESSAGE_ID` with actual message ID
   - `other_user_id` with actual user ID
   - `your_user_id` and `your_password` with actual credentials

2. **Token format:** Always use `Bearer TOKEN` format in Authorization header

3. **Content-Type:** Use `application/json` for POST requests with JSON body

4. **Base URL:** Adjust `http://localhost:5001` to your actual server URL

5. **Token expiry:** Tokens expire after 24 hours, you'll need to login again

6. **jq usage:** Install `jq` for pretty JSON formatting: `sudo apt install jq` (Ubuntu) or `brew install jq` (macOS)
